#!/usr/bin/env bash

# ---------------------------------------------------------
#
# ---------------------------------------------------------

set -e

alert() {
  local red='\x1b[31;01m'
  local no_color='\x1b[39;49;00m'
  echo -e "üçó ${red}$1${no_color}"
}

ask() {
  local yellow='\x1b[33;01m'
  local no_color='\x1b[39;49;00m'
  echo -e "üçó ${yellow}$1${no_color}"
}

info() {
  local green='\x1b[32;01m'
  local no_color='\x1b[39;49;00m'
  echo -e "${green}$1${no_color}"
}

silent=0
remove=0

# ---------------------------------------------------------
#
# ---------------------------------------------------------
while getopts 'hrs' opt; do
  case $opt in
    h)
      echo "Usage: proof [-h] [-s]"
      exit 0
      ;;
    r)
      remove=1
      ;;
    s)
      silent=1
      ;;
  esac
done

# ---------------------------------------------------------
#
# ---------------------------------------------------------
if [ -e ~/.proofrc ]; then
  . ~/.proofrc
fi

if [[ -z "$default_docroot" ]]; then
  default_docroot=/var/www/html/static.adorable.io
fi

# ---------------------------------------------------------
#  Read (or ask for) project configuration
# ---------------------------------------------------------
config_file=./.proofrc
if [ -e $config_file ]; then
  . $config_file
else
  alert "Could not find a config file for this project. Let's build one!"

  if [[ -z "$default_server" ]] ; then default_server='static.adorable.io' ; fi
  ask 'What server will this be pushed to? (default: '$default_server')'
  read g_server
  if [ -n "$g_server" ]; then
    server=$g_server
  else
    server=$default_server
  fi

  if [[ -z "$default_target" ]] ; then default_target='dist' ; fi
  ask 'What local directory should be pushed? (default: ./'$target')'
  read g_target
  if [ -n "$g_target" ]; then
    target=$g_target
  else
    target=$default_target
  fi

  name=${PWD##*/}
  ask 'What should the subdir name be on the server? (default: '$name')'
  read g_name
  if [ -n "$g_name" ]; then
    name=$g_name
  fi
fi

# ---------------------------------------------------------
# Validate SSH Keys
# ---------------------------------------------------------
if [[ -n "$default_key_file" ]]; then
  key_file=$default_key_file
else
  key_file=~/.ssh/proof_rsa
fi

if [[ -n "$default_pub_file" ]]; then
  pub_file=$default_pub_file
else
  pub_file=~/.ssh/proof_rsa.pub
fi

if [ ! -e $key_file ] || [ ! -e $pub_file ]; then
  alert "Could not find '$key_file' or '$pub_file'. Cannot continue."
  alert "  1. Ensure the proof SSH keys are in your ~/.ssh directory"
  alert "  2. Ensure the following block is in your ~/.ssh/config file:"
  alert "     Host static.whazzmaster.com"
  alert "       Hostname static.whazzmaster.com"
  alert "       User abott"
  alert "       IdentityFile ~/.ssh/proof_rsa"
  exit 1
fi

# ---------------------------------------------------------
#  Remove remote project directory
# ---------------------------------------------------------
if [[ $remove -gt 0 ]]; then
  info "Removing content at http://$server/$name..."
  ssh $server bash -c "'sudo rm -rf $default_docroot/$name'"

  info "Removing nginx configuration for $name..."
  echo "   (not implemented)"

  info "Reloading nginx configuration..."
  echo "   (not implemented)"

  exit 0
fi

# ---------------------------------------------------------
#  Report the configuration to be used for upload
# ---------------------------------------------------------
echo
info "The contents of ./$target will be available at http://$server/$name"
if [ $silent -eq 0 ]; then
  ask 'Shall we proceed? (Y/n)'
  read -n 1 proceed
  echo

  if [[ $proceed == 'n' || $proceed == 'N' ]]; then
    alert 'Aborting...'
    exit 1
  fi
fi

# ---------------------------------------------------------
#  Creating remote directories/setting permissions
# ---------------------------------------------------------
info "Creating remote directory $default_docroot/$name..."
ssh $server bash -c "'
sudo mkdir -p $default_docroot/$name
sudo chown -R www-data:www-data $default_docroot/$name
sudo chmod 775 -R $default_docroot/$name
'"

# ---------------------------------------------------------
#
# ---------------------------------------------------------
info 'Creating nginx config...'
echo '   (not implemented yet)'

# ---------------------------------------------------------
#  Creating remote directories/setting permissions
# ---------------------------------------------------------
info 'Uploading files...'
rsync -avz --omit-dir-times --no-perms -e ssh $target/ $server:$default_docroot/$name/

# ---------------------------------------------------------
#
# ---------------------------------------------------------
info 'Updating nginx config...'
echo '   (not implemented yet)'

# ---------------------------------------------------------
#
# ---------------------------------------------------------
info 'Testing nginx config...'
echo '   (not implemented yet)'

# ---------------------------------------------------------
#
# ---------------------------------------------------------
info 'Reloading nginx config...'
echo '   (not implemented yet)'

info "Done; opening http://$server/$name to see the site"
open http://$server/$name
